teoria so long:

processar somente o mapa visivel pelo player
Processo:
{
    dependendo da posicao inicial do player:
        copiar o mapa visivel a partir do mapa original (que nunca será alterado) para
            o mapa visivel;
        {
            numa funcao cujo tareja será inicializar o mapa visivel:
            {
                verificar se as dimensoes da janela nao sao excedidas pelos blocos do mapa:
                {
                    limite_altura = dimensao_da_janela_altura / pixeis_por_bloco;
                    limite_largura = dimensao_da_janela_largura / pixeis_por_bloco;
                    limite_altura é uma constante e deve ser armazenada numa struct (game->rl)
                    limite_largura é uma constante e deve ser armazenada numa struct (game->cl)
                }
                alocar memoria para mapa visivel atraves de limite_altura e limite_largura;
            }
            no mlx_loop:
            {
                copiar o conteudo visivel para o mapa visivel:
                {
                    pli = posicao no eixo das linhas inicial do mapa visivel (0, U) = posicao do player - (limite altura + 3); // like this the player sees his position, 
                                                                        //U = Undefined                                  //two blocs below and (height limit + player position) above
                    pci = posicao no eixo das colunas inicial do mapa visivel (U, 0) = limite de largura / 2 - posicao do player; // the player sees himself at the middle of the columns
                    se pli < 0 then pli = 0;
                    se pci < 0 then pci = 0;

                    uma vez que pci e pli estao definidos entao: copiar o mapa até limite de altura e limite de largura, porem antes
                        é necessario fazer umas verificaçoes;
                    {
                        limite de altura (la) > limite de altura original (lao)
                        limite de largura (ll) > limite de largura original (llo)
                        se la > lao
                        {
                            la = lao;
                            pci += lao - la;
                            se pli < 0 then pli = 0;
                        }
                        se ll > llo
                        {   
                            ll = llo
                            pli += llo - ll;
                              se pli < 0 then pli = 0;

                        }
                        
                    }
                    agora que la, ll, pci e pcl nao podem exceder os limites do mapa original entao copiar
                         o mapa até limite de altura e limite de largura

                    ciclo percorrer mapa visivel
                    mapa visivel = mapa original[pli, pci] ate mapa original[la, ll];

                }
            }
        }
}



!! no fim tentar: colocar uma imagem de fundo permanente, se possivel criar uma pequena animacao em loop


acrescentar usleep(35000) para as animaceos ficarem mais agradaveis e limitar a velocidade do player



problema:
    se o player move-se e ocorre um movimento de mapa, o player em vez de ficar no bloco seguinte ao que se encontrava, ele fica 2 depois

possivel solucao:
    criar uma comunicacao em 3 etapas:
        etapa 1:
            o player move se e envia um sinal (ativa um trigger) para o processamento de mapa;
        etapa 2:
            o processamento de mapa verifica o sinal (o trigger), se o sinal for positivo entao envia um sinal à funcao responsavel pelo display do player;
            //falta algo nesta etapa, c'est flou
            se o mapa mover entao a distancia entre a posicao 0 (dependendo do eixo) e a posicao do player deve permanecer a mesma
        etapa 3:
            o display do player verifica o sinal, se for positivo entao o player pode mover se para a posicao desejada, senao permanece na mesma (g.e.: 2, 8 --> 2,8)








void	aux_find_pic(game_data *game, int pic, int trig, int remainder)
{
	if (game->pic != pic)
	{
		pic = game->player->xy[1] + 2 - ((game->cl * 0.5) + remainder);// + 1 porque o resultado de game->cl / 2 arredonda para o numero acima entao eu retiro esse acrescimo;
		trig = 1;
		if (trig == 1)
		{
			game->trig = 1;
			game->triggerY = 1;
			//game->player->xy[1] = dist_two_points(game->player->xy[0], game->player->xy[1], game);
		}
	}
	else
		pic = game->player->xy[1] - ((game->cl * 0.5) + remainder);// + 1 porque o resultado de game->cl / 2 arredonda para o numero acima entao eu retiro esse acrescimo;
}

void	process_map(game_data *game, int trigger)
{
	int	i;
	int	j;
	int	pil;
	int	pic;
	int	trig;

	trig = 0;
	i = -1;
	j = 0;
	ft_printf("\nProcess Map\n");

	ft_printf("\npx %i, py %i\n\n", game->player->xy[0], game->player->xy[1]);

	if (game->rl >= WINDOW_HEIGHT / BPX)
		pil = game->player->xy[0] - ((game->rl - 1) - 3); //(game->rl - 1 porque o rl comeca em 1 sendo que o pil deve comecar em 0)
	else
		pil = 0;
	
	if (game->cl % 2 != 0)
		pic = game->player->xy[1] - ((game->cl * 0.5) + 1);// + 1 porque o resultado de game->cl / 2 arredonda para o numero acima entao eu retiro esse acrescimo;
	else
		pic = game->player->xy[1] - (game->cl * 0.5);
	if (game->col >= WINDOW_WIDTH / BPX && game->cl - pic > 0) // RECOMECAR ESTE IF / CAUSA DO JUMPING DO PLAYER 
	{
		if (game->player->xy[1] > game->cl * 0.5)
			pic = game->col - game->cl;
		else if (game->cl % 2 != 0)
			aux_find_pic(game, pic, trig, 1);
		else
			aux_find_pic(game, pic, trig, 0);
	} //ESTE IF FAZ FUNCIONAR A MOVIMENTACAO DO MAPA MAS MUDA A POSICAO INICIAL DO PLAYER ////// é o contrario



---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




1. funcao de player:
    altera a posicao do player
2. funcao do mapa:
    define a pic consoante a nova posicao do player e processa o mapa a partir da pic
3. funcao que printa o player:
    ajusta a posicao do player se necessario e printa

problema:
    como saber se é preciso ajustar a posicao do player ou nao


usar o contador de movimentos para saber se o player se moveu